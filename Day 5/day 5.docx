As we have shared in the first lesson we need to follow a particular flow when we are working with SciKit-learn
If you have forgotten 
1. Getting the data ready
2. Choose the right estimator/algorithm/model for our problems
3. Fit the model/algorithm and use it to make predictions on our data
4. Evaluating a model
5. Improve a model
6. Save and load a trained model
7. Putting it all together

This is what I am talking about.

So we have worked with point 1. which is getting the data ready now we are going to look into Choosing the right estimators/algorithms/model

If you are someone like me who doesn't know which model or algorithm to choose for different types of datasets then you can follow https://scikit-learn.org/stable/machine_learning_map.html this link, where Scikit learn has map created for you to understand and select the correct algorithm based on your needs.
So, Let's get started

Previously for datasets, we used our own dataset but this time we are going to use a real-world dataset from SciKit_learn
To do so, we are going to use the fetch_california_housing module of sklearn which you can find here https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html

Now we have the dataset and you will see much of the information in it like the target, feature, values, etc. and we want to use the features to predict the target. Now let's turn this into a data frame
housing_df = pd.DataFrame(housing["data"], columns = housing["feature_names"]) we want the data to be used as the values and the feature_names as the column and you will see the complete dataset which has 20+ thousand rows. now this would be fun

Now you'll see that there is a target given 'target_names': ['MedHouseVal'], which is not in the dataset. So, we need to add it to our dataset
housing_df["MedHouseVal"] = housing["target"] so we ask scikit learn to add the target column into our new dataset 

Then it will be like our usual flow. chossing the model. split the data into X & y and then test the data and predict
Now to choose the model this time we are using the map from scikit learn and we choose Ridge model to experiment it on our dataset

#Choosing the algorithm/estimator
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split

#setup random seed
np.random.seed(42)

#split into X & y
X = housing_df.drop("target", axis = 1)
y = housing_df["target"]

#spliting the data into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

#Fit the data
model = Ridge()
model.fit(X_train, y_train)

#score the data
model.score(X_test, y_test)

Then if run it we will see that this time we are getting a better result than the previous time. So, that means this time the algorithm has worked better than the previous algorithms.

That's how we can check and choose different algorithms for our dataset

Now we tried with Ridge model and it gave us an output. Now what if we want to try something else? a different algorithm? Then what would happen?
That is what we are about to find out

Let's say this time we are going to use the RandomForrestRegressor. And we found this model as well using the scikitlearn model choosing map.

so, what is a random forest regressor 
Random Forest is like a group decision-making system — it builds multiple decision trees, then combines their predictions to make the final decision. It’s a type of ensemble learning because it learns from many models instead of just one

So let's import that now
from sklearn.ensemble import RandomForestRegressor

then as usual splitting the data into X & y and creating training and test sets
then if we create a model and fit it to score it on the test sets

#Create a model and fit it
model = RandomForestRegressor()
model.fit(X_train, y_train)

#predict the score
model.score(X_test, y_test)

Then this time we will find a much better score which is what we are looking for.

That's how we can choose different models or algorithms to get our desired result

Now we have seen Regression type problems where we predict a value of a variable based on another variable. and we have tested different types of model/algorithms as well.
What if we want to do it for a Classification type problem?
that's what we are going to check now

Again if you are not sure what we are talking about https://scikit-learn.org/stable/machine_learning_map.html follow this map and you will understand what we are doing
So according to the map we are going to use the LinearSVC model/algorithm now
and as we are going to work on a classification problem, we will need a classification dataset. which is the heart_disease dataset
