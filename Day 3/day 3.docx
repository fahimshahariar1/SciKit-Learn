As mentioned now we will look into converting non-numerical values to numerical values because the computer doesn't understand colors or any other features as we do.

For example in the car_sales file we have many features of a car like color, doors ,etc. but the computer or machine or model will not understand what the color is for that particular car and hence will not be able to predict the value as needed.

That's why we need to convert those into numerical values
if we just follow the normal workflow of getting the data ready and splitting into X/y and into train and test data and after that if you try to fit the model you will see an error like this : could not convert string to float: 'Honda'

So, now we need to convert the values into numerical ones. to do that we will use two new modules from sklearn
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

Onehotencoder basically encodes the categories into different numbers and columntransformer is what the name says it is
Here we will first create a variable for the columns that needs to be changed
categorical_features = ["Make", "Colour", "Doors"]

then create a variable to use the Encoder
one_hot = OneHotEncoder()

and another variable to transform the columns as needed and pass in parameters
transformer = ColumnTransformer([("one_hot", one_hot, categorical_features)],
                               remainder="passthrough")

now you will see its working
transformed_X = transformer.fit_transform(X)
transformed_X;

But the values that you will get we can't really use it so we have to put it into a numpy array
transformed_X_dense = transformed_X.toarray()
print(transformed_X_dense)
Converting it to a numpy array

Then again if we try to fit the model and evaluate
np.random.seed(42)
X_train, X_test, y_train, y_test = train_test_split(transformed_X_dense, y_new, test_size=0.2)

model.fit(X_train, y_train)
model.score(X_test, y_test)

it will give us our desired result. yes the values might not be as good as we would like. Maybe the model hasn't worked as we wanted but we will look into that later. but that's how we can convert a non-numerical values or columns into numerical

Note: if you find some error showing that you have nan values in your dataframe then just convert it using 
y_new = np.nan_to_num(y, nan =0)
y_new

or you can just remove the columns that has nan values which is suggested 
