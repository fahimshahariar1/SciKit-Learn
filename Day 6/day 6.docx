So we have covered a lot till now. Up next we will move to our point no 3. Do you remember? if not no worries we can check back again
  1. Getting the data ready
2. Choose the right estimator/algorithm/model for our problems
3. Fit the model/algorithm and use it to make predictions on our data
4. Evaluating a model
5. Improve a model
6. Save and load a trained model
7. Putting it all together

Today we are going to look at 3. Fit the model and use it to make predictions.
Now you might think that we have already done it. Yes, we have but now we are going to look into this in a bit more depth

So we have fit the model using the .fit function but when it comes to predictions it can be done in three ways 
1. the way we did till now which is using the score() function
2. using .predict - we can also call the predict() function and pass on the test set and it will give us the desired result
3. using metrices - for this we will need to import a module from sklearn which is from sklearn.metrics import accuracy_score then call the 
accuracy_score(y_test, y_preds) to get the result

you will notice that three of them give us the same output or the same result as before

On the other hand what predict_proba() function does is the it will give us probability of something happening into two numbers of arrays.

If we go back and check clf.predict(X_test[:5]) you will see it will give us an array of numbers of 0 and 1
similarly if we run clf.predict_proba(X_test[:5]) it will give us an array of numbers 

Now if we look deep you'd see that for the first number we got from the predict() function is 1 and for this from the predict_proba() function we got an array of [0.13, 0.87]
where the number on the right side is bigger 
