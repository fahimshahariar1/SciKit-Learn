We saw a glimpse in the last lesson that there might be missing values in your data.
and which might cause some issues when you are working with them they will give you errors

There are ways that we can fix them.

1. fixing them by using pandas

To Fix them with pandas we can just simply use the replace method to change the values to "missing" if they are integer and use the mean() function if its integer type

2. fixing them using Scilit-learn
In order to change or fill the mising values using Scikit learn we need to first split the data into X & y using the train_est_split module

The we will import two modules SimpleImputer and ColumnTransformer
SimpleImputer is basically a helping hand who imputes or makes the changes and Columntransformer well as its name it transforms the columns
cat_imputer = SimpleImputer(strategy="constant", fill_value="missing")
door_imputer = SimpleImputer(strategy="constant", fill_value=4)
num_imputer = SimpleImputer(strategy="mean")

We first created 3 imputers who will impute based ont he categorical features
cat_features = ["Make", "Colour"]
door_features = ["Doors"]
num_features = ["Odometer (KM)"]
Then we will create the features and then 

Call in the imputer function who will fill those missing values
imputer = ColumnTransformer([
    ("cat_imputer", cat_imputer, cat_features),
    ("door_imputer", door_imputer, door_features),
    ("num_imputer", num_imputer, num_features),
                            ])

Then we will transform the data
Notice here we are using two different variable for training and testing data this is very cruicial

filled_X_train = imputer.fit_transform(X_train)
filled_X_test = imputer.transform(X_test)

filled_X_train

Now if you run it you will see no errors or missing values

Then we will convert it to a dataframe

car_sales_filled_train = pd.DataFrame(filled_X_train, columns=["Make", "Colour", "Doors", "Odometer (KM)"])

car_sales_filled_test = pd.DataFrame(filled_X_test, columns=["Make", "Colour", "Doors", "Odometer (KM)"])
car_sales_filled.head()

And follow the way we previously used by Hotencoder 

# Import OneHotEncoder class from sklearn
from sklearn.preprocessing import OneHotEncoder

# Now let's one hot encode the features with the same code as before 
categorical_features = ["Make", "Colour", "Doors"]
one_hot = OneHotEncoder()
transformer = ColumnTransformer([("one_hot", 
                                 one_hot, 
                                 categorical_features)],
                                 remainder="passthrough")

# Fill train and test values separately
transformed_X_train = transformer.fit_transform(car_sales_filled_train) # fit and transform the training data
transformed_X_test = transformer.transform(car_sales_filled_test) # transform the test data

# Check transformed and filled X_train
transformed_X_train.toarray()
